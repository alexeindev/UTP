#include <SPI.h>
#include <Ethernet.h>
//--------------------------------------------------------------------------------------------
//Declaración de la direcciones MAC e IP. También del puerto 80
byte mac[]={0xDE,0xAD,0xBE,0xEF,0xFE,0xED}; //MAC
IPAddress ip(192,168,8,240); //IP
EthernetServer server(80);
//--------------------------------------------------------------------------------------------
long cm = 0;
int statusParqueo[3];

long readUltrasonicDistance(int triggerPin, int echoPin)

{
  pinMode(triggerPin, OUTPUT);  // Clear the trigger
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  // Sets the trigger pin to HIGH state for 10 microseconds
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  pinMode(echoPin, INPUT);
  // Reads the echo pin, and returns the sound wave travel time in microseconds *0.01723
  return (pulseIn(echoPin, HIGH)*0.01723);
  
}


void setup()
{
 
  Serial.begin(9600);
  pinMode(2, OUTPUT);
 
 //Inicializamos el servidor
  Ethernet.begin(mac, ip); 
  server.begin();
  Serial.print("Servidor WEB en la IP : ");
  Serial.println(Ethernet.localIP());
  
}

void loop()/////////////////////////////////////////////////////////////////////////////////////////////////
{
  
  //Se activan sensores para cargar app web
  cm =readUltrasonicDistance(7, 6); //asiggna en cm la distancia del sensor A0 del parqueo 1

  Serial.println(cm);
  //Serial.println("cm");
  
  if (cm <= 75) {
    digitalWrite(2, HIGH); delay(300);
    digitalWrite(2, LOW);
    statusParqueo[0] = 0;
   
  }
  if (cm <= 30) {
    digitalWrite(2, HIGH);
    statusParqueo[0] = 0;   
   
  }
  
   if (cm >= 100) {
    digitalWrite(2,LOW);
    statusParqueo[0] = 1;
   
  }
  
  cm =readUltrasonicDistance(8, 9); //asiggna en cm la distancia del sensor A1 del parqueo 1

  Serial.println(cm);
  
  //Serial.println("cm");
  
  
   if (cm <= 75) {
    digitalWrite(2, HIGH); delay(300);
    digitalWrite(2, LOW);
    statusParqueo[1] = 0;
   
  }
  if (cm <= 30) {
    digitalWrite(2, HIGH);
    statusParqueo[1] = 0;   
   
  }
  
   if (cm >= 100) {
    digitalWrite(2,LOW);
    statusParqueo[1] = 1;
   
  }
  
  statusParqueo[2] = 1;
  
  
  
  //Escucha a clientes de entrada
  EthernetClient client = server.available();
  if (client) {
    //Serial.println("new client");
    //Una solicitud http cuya linea esta en blanco
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        //Serial.write(c);
        // Si la linea en la solicitud http esta en blanco y el cliente esta disponible se puede enviar una respuesta
        if (c == '\n' && currentLineIsBlank) {
          //client.println("HTTP/1.1 200 OK");
          //client.println("Content-Type: text/html");
          //client.println("Connnection: close");
          //client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          // Agregar una etiqueta meta que recargue la pagina cada segundo
          client.println("<meta http-equiv=\"refresh\" content=\"2\">");
          client.print("PARQUEO APP WEB");   
          client.println("<br />");    

          //Obtener las lecturas del sensor e imprimir el resultado
          // La lectura de la temperatura o de la humedad tarda aproximadamente 250 milisegundos en el sensor 
          //float h = dht.readHumidity();  //Guarda la lectura de la humedad en la variable float h
          //float t = dht.readTemperature();  //Guarda la lectura de la temperatura en la variable float t
        //------------------------------------------------SENSOR A0-----------------------------------------------        
  
          //Escribimos en la APP los valores del parqueadero leídos previamente
          client.print("Lugares totales: ");
          int lugares = 3;
          client.print(lugares);  
          client.println("<br />");
          
          client.print("<br>-------------------");
          int disponibles = 0;
          int suma = 0;
          for (int i = 0; i<3 ; i++){
            suma = statusParqueo[i] + suma;
            disponibles = suma;
          }
          
          client.print("-Lugares disponibles: ");
          client.print(disponibles);
          
          client.println("<table>");
        
         for (int i = 0 ; i <3 ; i++){
          client.println("<tr>");
          if(statusParqueo[i]=1){
            client.println("<th bgcolor=#008000> Estacionamiento");
            client.print(i);
            client.println("</th>");
          }else{
            client.println("<th bgcolor=#FF0000> Estacionamiento");
            client.print(i);
            client.println("</th>");
          }
          client.println("<tr>");
         }
          //Termina lectura del sensor
          client.println("</table>");
          client.println("</html>");
          break;

        }

        if (c == '\n') {
          //Linea en blanco
          currentLineIsBlank = true;
        } 
        else if (c != '\r') {
          //Si hay un caracter en la linea en blanco
          currentLineIsBlank = false;
        }
      }
      
    }
    //Darle al navegador web tiempo para recibir los datos 
    delay(2000); //Tiene un retardo de 1000 ms = 1s para repetir el ciclo void loop.
    //Se cierra la conexion
    client.stop();
    //Serial.println("client disonnected");
  }
} //Termina loop
  
