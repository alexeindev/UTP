Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    AMPERSANT
    ARCTAN
    CASE
    CHR
    CLOSECOMMENT
    CLOSECOMMENT2
    COMMENT
    COS
    DISPOSE
    DIVIDE
    DOWNTO
    EOF
    EOLN
    EXP
    FALSE
    FILE
    FOR
    GET
    GOTO
    HASHTAG
    IN
    INPUT
    LABEL
    LN
    MAXINT
    MOD
    NEW
    NIL
    ODD
    OPENCOMMENT
    OPENCOMMENT2
    ORD
    OUTPUT
    PACK
    PACKED
    PAGE
    PRED
    PUT
    READLN
    REAL
    RECORD
    REPEAT
    RESET
    REWRITE
    ROUND
    SET
    SIMPLE
    SIN
    SQR
    SQRT
    SUCC
    TEXT
    TO
    TRUE
    TRUNC
    TYPE
    UNPACK
    UNTIL
    WITH
    WRITELN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     block -> variable_declaration_part procedure_declaration_part statement_part
Rule 3     variable_declaration_part -> empty
Rule 4     variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part
Rule 5     variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part
Rule 6     variable_declaration -> ID variable_declaration2 COLON type
Rule 7     variable_declaration2 -> COMMA ID variable_declaration2
Rule 8     variable_declaration2 -> empty
Rule 9     const_declaration -> ID EQUAL NUMBER
Rule 10    const_declaration -> ID EQUAL STRING
Rule 11    type -> simple_type
Rule 12    type -> array_type
Rule 13    array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type
Rule 14    index_range -> NUMBER DOT DOT NUMBER
Rule 15    simple_type -> type_identifier
Rule 16    type_identifier -> INTEGER
Rule 17    type_identifier -> CHAR
Rule 18    type_identifier -> BOOLEAN
Rule 19    procedure_declaration_part -> empty
Rule 20    procedure_declaration_part -> procedure_declaration
Rule 21    procedure_declaration_part -> function_declaration
Rule 22    procedure_declaration -> PROCEDURE ID SEMICOLON block
Rule 23    function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part
Rule 24    call_function -> ID LPAREN args RPAREN SEMICOLON
Rule 25    args -> args args2
Rule 26    args -> empty
Rule 27    args2 -> empty
Rule 28    args2 -> COMMA args
Rule 29    args2 -> NUMBER COMMA args
Rule 30    args2 -> STRING args
Rule 31    args2 -> ID
Rule 32    args2 -> NUMBER
Rule 33    args2 -> STRING
Rule 34    statement_part -> compound_statement
Rule 35    compound_statement -> BEGIN statement END DOT compound_statement2
Rule 36    compound_statement2 -> empty
Rule 37    compound_statement2 -> compound_statement
Rule 38    statement -> simple_statement
Rule 39    statement -> statement simple_statement
Rule 40    statement -> statement structured_statement
Rule 41    statement -> structured_statement
Rule 42    statement3 -> SEMICOLON statement
Rule 43    statement3 -> empty
Rule 44    simple_statement -> assignment_statement
Rule 45    simple_statement -> procedure_statement
Rule 46    simple_statement -> read_statement
Rule 47    simple_statement -> write_statement
Rule 48    simple_statement -> call_function
Rule 49    assignment_statement -> variable COLON EQUAL expression SEMICOLON
Rule 50    procedure_statement -> procedure_identifier
Rule 51    procedure_identifier -> ID
Rule 52    read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
Rule 53    input_variable -> variable
Rule 54    input_variable2 -> empty
Rule 55    input_variable2 -> COMMA variable
Rule 56    write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
Rule 57    output_value -> expression
Rule 58    output_value -> STRING
Rule 59    output_value2 -> empty
Rule 60    output_value2 -> COMMA expression
Rule 61    structured_statement -> compound_statement
Rule 62    structured_statement -> if_statement
Rule 63    structured_statement -> while_statement
Rule 64    if_statement -> IF LPAREN expression RPAREN THEN statement
Rule 65    if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement
Rule 66    while_statement -> WHILE expression DO statement
Rule 67    while_statement -> WHILE expression DO BEGIN statement END SEMICOLON
Rule 68    expression -> simple_expression
Rule 69    expression -> simple_expression relational_operator simple_expression
Rule 70    simple_expression -> sign term simple_expression2
Rule 71    simple_expression2 -> adding_operator term
Rule 72    simple_expression2 -> empty
Rule 73    term -> factor term2
Rule 74    term2 -> multiplying_operator factor
Rule 75    term2 -> empty
Rule 76    factor -> variable
Rule 77    factor -> NUMBER
Rule 78    factor -> LPAREN expression RPAREN
Rule 79    factor -> NOT factor
Rule 80    relational_operator -> EQUAL
Rule 81    relational_operator -> DISTINT
Rule 82    relational_operator -> LESS
Rule 83    relational_operator -> GREATER
Rule 84    relational_operator -> GREATER EQUAL
Rule 85    relational_operator -> LESS EQUAL
Rule 86    sign -> PLUS
Rule 87    sign -> MINUS
Rule 88    sign -> empty
Rule 89    adding_operator -> PLUS
Rule 90    adding_operator -> MINUS
Rule 91    adding_operator -> OR
Rule 92    multiplying_operator -> TIMES
Rule 93    multiplying_operator -> DIV
Rule 94    multiplying_operator -> AND
Rule 95    variable -> entire_variable
Rule 96    variable -> indexed_variable
Rule 97    indexed_variable -> array_variable LBRACKET expression RBRACKET
Rule 98    array_variable -> entire_variable
Rule 99    entire_variable -> variable_identifier
Rule 100   variable_identifier -> ID
Rule 101   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AMPERSANT            : 
AND                  : 94
ARCTAN               : 
ARRAY                : 13
BEGIN                : 35 67
BOOLEAN              : 18
CASE                 : 
CHAR                 : 17
CHR                  : 
CLOSECOMMENT         : 
CLOSECOMMENT2        : 
COLON                : 6 23 49
COMMA                : 7 28 29 55 60
COMMENT              : 
CONST                : 5
COS                  : 
DISPOSE              : 
DISTINT              : 81
DIV                  : 93
DIVIDE               : 
DO                   : 66 67
DOT                  : 14 14 35
DOWNTO               : 
ELSE                 : 65
END                  : 35 67
EOF                  : 
EOLN                 : 
EQUAL                : 9 10 49 80 84 85
EXP                  : 
FALSE                : 
FILE                 : 
FOR                  : 
FUNCTION             : 23
GET                  : 
GOTO                 : 
GREATER              : 83 84
HASHTAG              : 
ID                   : 1 6 7 9 10 22 23 24 31 51 100
IF                   : 64 65
IN                   : 
INPUT                : 
INTEGER              : 16
LABEL                : 
LBRACKET             : 13 97
LESS                 : 82 85
LN                   : 
LPAREN               : 23 24 52 56 64 65 78
MAXINT               : 
MINUS                : 87 90
MOD                  : 
NEW                  : 
NIL                  : 
NOT                  : 79
NUMBER               : 9 14 14 29 32 77
ODD                  : 
OF                   : 13
OPENCOMMENT          : 
OPENCOMMENT2         : 
OR                   : 91
ORD                  : 
OUTPUT               : 
PACK                 : 
PACKED               : 
PAGE                 : 
PLUS                 : 86 89
PRED                 : 
PROCEDURE            : 22
PROGRAM              : 1
PUT                  : 
RBRACKET             : 13 97
READ                 : 52
READLN               : 
REAL                 : 
RECORD               : 
REPEAT               : 
RESET                : 
REWRITE              : 
ROUND                : 
RPAREN               : 23 24 52 56 64 65 78
SEMICOLON            : 1 4 5 22 23 24 42 49 52 56 67
SET                  : 
SIMPLE               : 
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 10 30 33 58
SUCC                 : 
TEXT                 : 
THEN                 : 64 65
TIMES                : 92
TO                   : 
TRUE                 : 
TRUNC                : 
TYPE                 : 
UNPACK               : 
UNTIL                : 
VAR                  : 4
WHILE                : 66 67
WITH                 : 
WRITE                : 56
WRITELN              : 
error                : 

Nonterminals, with rules where they appear

adding_operator      : 71
args                 : 24 25 28 29 30
args2                : 25
array_type           : 12
array_variable       : 97
assignment_statement : 44
block                : 1 22
call_function        : 48
compound_statement   : 34 37 61
compound_statement2  : 35
const_declaration    : 5
empty                : 3 8 19 26 27 36 43 54 59 72 75 88
entire_variable      : 95 98
expression           : 49 57 60 64 65 66 67 78 97
factor               : 73 74 79
function_declaration : 21
if_statement         : 62
index_range          : 13
indexed_variable     : 96
input_variable       : 52
input_variable2      : 52
multiplying_operator : 74
output_value         : 56
output_value2        : 56
procedure_declaration : 20
procedure_declaration_part : 2
procedure_identifier : 50
procedure_statement  : 45
program              : 0
read_statement       : 46
relational_operator  : 69
sign                 : 70
simple_expression    : 68 69 69
simple_expression2   : 70
simple_statement     : 38 39
simple_type          : 11 13
statement            : 35 39 40 42 64 65 65 66 67
statement3           : 
statement_part       : 2
structured_statement : 40 41
term                 : 70 71
term2                : 73
type                 : 6 23
type_identifier      : 15
variable             : 49 53 55 76
variable_declaration : 4 23
variable_declaration2 : 6 7
variable_declaration_part : 2 4 5 23
variable_identifier  : 99
while_statement      : 63
write_statement      : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (101) empty -> .

    VAR             shift and go to state 8
    CONST           shift and go to state 9
    PROCEDURE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    BEGIN           reduce using rule 101 (empty -> .)

    block                          shift and go to state 5
    variable_declaration_part      shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 6

    (2) block -> variable_declaration_part . procedure_declaration_part statement_part
    (19) procedure_declaration_part -> . empty
    (20) procedure_declaration_part -> . procedure_declaration
    (21) procedure_declaration_part -> . function_declaration
    (101) empty -> .
    (22) procedure_declaration -> . PROCEDURE ID SEMICOLON block
    (23) function_declaration -> . FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    BEGIN           reduce using rule 101 (empty -> .)
    PROCEDURE       shift and go to state 14
    FUNCTION        shift and go to state 15

    procedure_declaration_part     shift and go to state 10
    empty                          shift and go to state 11
    procedure_declaration          shift and go to state 12
    function_declaration           shift and go to state 13

state 7

    (3) variable_declaration_part -> empty .

    PROCEDURE       reduce using rule 3 (variable_declaration_part -> empty .)
    FUNCTION        reduce using rule 3 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 3 (variable_declaration_part -> empty .)


state 8

    (4) variable_declaration_part -> VAR . variable_declaration SEMICOLON variable_declaration_part
    (6) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 17

    variable_declaration           shift and go to state 16

state 9

    (5) variable_declaration_part -> CONST . const_declaration SEMICOLON variable_declaration_part
    (9) const_declaration -> . ID EQUAL NUMBER
    (10) const_declaration -> . ID EQUAL STRING

    ID              shift and go to state 19

    const_declaration              shift and go to state 18

state 10

    (2) block -> variable_declaration_part procedure_declaration_part . statement_part
    (34) statement_part -> . compound_statement
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2

    BEGIN           shift and go to state 22

    statement_part                 shift and go to state 20
    compound_statement             shift and go to state 21

state 11

    (19) procedure_declaration_part -> empty .

    BEGIN           reduce using rule 19 (procedure_declaration_part -> empty .)


state 12

    (20) procedure_declaration_part -> procedure_declaration .

    BEGIN           reduce using rule 20 (procedure_declaration_part -> procedure_declaration .)


state 13

    (21) procedure_declaration_part -> function_declaration .

    BEGIN           reduce using rule 21 (procedure_declaration_part -> function_declaration .)


state 14

    (22) procedure_declaration -> PROCEDURE . ID SEMICOLON block

    ID              shift and go to state 23


state 15

    (23) function_declaration -> FUNCTION . ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    ID              shift and go to state 24


state 16

    (4) variable_declaration_part -> VAR variable_declaration . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 25


state 17

    (6) variable_declaration -> ID . variable_declaration2 COLON type
    (7) variable_declaration2 -> . COMMA ID variable_declaration2
    (8) variable_declaration2 -> . empty
    (101) empty -> .

    COMMA           shift and go to state 27
    COLON           reduce using rule 101 (empty -> .)

    variable_declaration2          shift and go to state 26
    empty                          shift and go to state 28

state 18

    (5) variable_declaration_part -> CONST const_declaration . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 29


state 19

    (9) const_declaration -> ID . EQUAL NUMBER
    (10) const_declaration -> ID . EQUAL STRING

    EQUAL           shift and go to state 30


state 20

    (2) block -> variable_declaration_part procedure_declaration_part statement_part .

    $end            reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)
    BEGIN           reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)


state 21

    (34) statement_part -> compound_statement .

    $end            reduce using rule 34 (statement_part -> compound_statement .)
    BEGIN           reduce using rule 34 (statement_part -> compound_statement .)


state 22

    (35) compound_statement -> BEGIN . statement END DOT compound_statement2
    (38) statement -> . simple_statement
    (39) statement -> . statement simple_statement
    (40) statement -> . statement structured_statement
    (41) statement -> . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    statement                      shift and go to state 31
    simple_statement               shift and go to state 32
    structured_statement           shift and go to state 33
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 23

    (22) procedure_declaration -> PROCEDURE ID . SEMICOLON block

    SEMICOLON       shift and go to state 53


state 24

    (23) function_declaration -> FUNCTION ID . LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    LPAREN          shift and go to state 54


state 25

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (101) empty -> .

    VAR             shift and go to state 8
    CONST           shift and go to state 9
    PROCEDURE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    BEGIN           reduce using rule 101 (empty -> .)

    variable_declaration_part      shift and go to state 55
    empty                          shift and go to state 7

state 26

    (6) variable_declaration -> ID variable_declaration2 . COLON type

    COLON           shift and go to state 56


state 27

    (7) variable_declaration2 -> COMMA . ID variable_declaration2

    ID              shift and go to state 57


state 28

    (8) variable_declaration2 -> empty .

    COLON           reduce using rule 8 (variable_declaration2 -> empty .)


state 29

    (5) variable_declaration_part -> CONST const_declaration SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (101) empty -> .

    VAR             shift and go to state 8
    CONST           shift and go to state 9
    PROCEDURE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    BEGIN           reduce using rule 101 (empty -> .)

    variable_declaration_part      shift and go to state 58
    empty                          shift and go to state 7

state 30

    (9) const_declaration -> ID EQUAL . NUMBER
    (10) const_declaration -> ID EQUAL . STRING

    NUMBER          shift and go to state 59
    STRING          shift and go to state 60


state 31

    (35) compound_statement -> BEGIN statement . END DOT compound_statement2
    (39) statement -> statement . simple_statement
    (40) statement -> statement . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    END             shift and go to state 61
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    simple_statement               shift and go to state 62
    structured_statement           shift and go to state 63
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 32

    (38) statement -> simple_statement .

    END             reduce using rule 38 (statement -> simple_statement .)
    READ            reduce using rule 38 (statement -> simple_statement .)
    WRITE           reduce using rule 38 (statement -> simple_statement .)
    ID              reduce using rule 38 (statement -> simple_statement .)
    BEGIN           reduce using rule 38 (statement -> simple_statement .)
    IF              reduce using rule 38 (statement -> simple_statement .)
    WHILE           reduce using rule 38 (statement -> simple_statement .)
    ELSE            reduce using rule 38 (statement -> simple_statement .)


state 33

    (41) statement -> structured_statement .

    END             reduce using rule 41 (statement -> structured_statement .)
    READ            reduce using rule 41 (statement -> structured_statement .)
    WRITE           reduce using rule 41 (statement -> structured_statement .)
    ID              reduce using rule 41 (statement -> structured_statement .)
    BEGIN           reduce using rule 41 (statement -> structured_statement .)
    IF              reduce using rule 41 (statement -> structured_statement .)
    WHILE           reduce using rule 41 (statement -> structured_statement .)
    ELSE            reduce using rule 41 (statement -> structured_statement .)


state 34

    (44) simple_statement -> assignment_statement .

    END             reduce using rule 44 (simple_statement -> assignment_statement .)
    READ            reduce using rule 44 (simple_statement -> assignment_statement .)
    WRITE           reduce using rule 44 (simple_statement -> assignment_statement .)
    ID              reduce using rule 44 (simple_statement -> assignment_statement .)
    BEGIN           reduce using rule 44 (simple_statement -> assignment_statement .)
    IF              reduce using rule 44 (simple_statement -> assignment_statement .)
    WHILE           reduce using rule 44 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 44 (simple_statement -> assignment_statement .)


state 35

    (45) simple_statement -> procedure_statement .

    END             reduce using rule 45 (simple_statement -> procedure_statement .)
    READ            reduce using rule 45 (simple_statement -> procedure_statement .)
    WRITE           reduce using rule 45 (simple_statement -> procedure_statement .)
    ID              reduce using rule 45 (simple_statement -> procedure_statement .)
    BEGIN           reduce using rule 45 (simple_statement -> procedure_statement .)
    IF              reduce using rule 45 (simple_statement -> procedure_statement .)
    WHILE           reduce using rule 45 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 45 (simple_statement -> procedure_statement .)


state 36

    (46) simple_statement -> read_statement .

    END             reduce using rule 46 (simple_statement -> read_statement .)
    READ            reduce using rule 46 (simple_statement -> read_statement .)
    WRITE           reduce using rule 46 (simple_statement -> read_statement .)
    ID              reduce using rule 46 (simple_statement -> read_statement .)
    BEGIN           reduce using rule 46 (simple_statement -> read_statement .)
    IF              reduce using rule 46 (simple_statement -> read_statement .)
    WHILE           reduce using rule 46 (simple_statement -> read_statement .)
    ELSE            reduce using rule 46 (simple_statement -> read_statement .)


state 37

    (47) simple_statement -> write_statement .

    END             reduce using rule 47 (simple_statement -> write_statement .)
    READ            reduce using rule 47 (simple_statement -> write_statement .)
    WRITE           reduce using rule 47 (simple_statement -> write_statement .)
    ID              reduce using rule 47 (simple_statement -> write_statement .)
    BEGIN           reduce using rule 47 (simple_statement -> write_statement .)
    IF              reduce using rule 47 (simple_statement -> write_statement .)
    WHILE           reduce using rule 47 (simple_statement -> write_statement .)
    ELSE            reduce using rule 47 (simple_statement -> write_statement .)


state 38

    (48) simple_statement -> call_function .

    END             reduce using rule 48 (simple_statement -> call_function .)
    READ            reduce using rule 48 (simple_statement -> call_function .)
    WRITE           reduce using rule 48 (simple_statement -> call_function .)
    ID              reduce using rule 48 (simple_statement -> call_function .)
    BEGIN           reduce using rule 48 (simple_statement -> call_function .)
    IF              reduce using rule 48 (simple_statement -> call_function .)
    WHILE           reduce using rule 48 (simple_statement -> call_function .)
    ELSE            reduce using rule 48 (simple_statement -> call_function .)


state 39

    (61) structured_statement -> compound_statement .

    END             reduce using rule 61 (structured_statement -> compound_statement .)
    READ            reduce using rule 61 (structured_statement -> compound_statement .)
    WRITE           reduce using rule 61 (structured_statement -> compound_statement .)
    ID              reduce using rule 61 (structured_statement -> compound_statement .)
    BEGIN           reduce using rule 61 (structured_statement -> compound_statement .)
    IF              reduce using rule 61 (structured_statement -> compound_statement .)
    WHILE           reduce using rule 61 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 61 (structured_statement -> compound_statement .)


state 40

    (62) structured_statement -> if_statement .

    END             reduce using rule 62 (structured_statement -> if_statement .)
    READ            reduce using rule 62 (structured_statement -> if_statement .)
    WRITE           reduce using rule 62 (structured_statement -> if_statement .)
    ID              reduce using rule 62 (structured_statement -> if_statement .)
    BEGIN           reduce using rule 62 (structured_statement -> if_statement .)
    IF              reduce using rule 62 (structured_statement -> if_statement .)
    WHILE           reduce using rule 62 (structured_statement -> if_statement .)
    ELSE            reduce using rule 62 (structured_statement -> if_statement .)


state 41

    (63) structured_statement -> while_statement .

    END             reduce using rule 63 (structured_statement -> while_statement .)
    READ            reduce using rule 63 (structured_statement -> while_statement .)
    WRITE           reduce using rule 63 (structured_statement -> while_statement .)
    ID              reduce using rule 63 (structured_statement -> while_statement .)
    BEGIN           reduce using rule 63 (structured_statement -> while_statement .)
    IF              reduce using rule 63 (structured_statement -> while_statement .)
    WHILE           reduce using rule 63 (structured_statement -> while_statement .)
    ELSE            reduce using rule 63 (structured_statement -> while_statement .)


state 42

    (49) assignment_statement -> variable . COLON EQUAL expression SEMICOLON

    COLON           shift and go to state 64


state 43

    (50) procedure_statement -> procedure_identifier .

    END             reduce using rule 50 (procedure_statement -> procedure_identifier .)
    READ            reduce using rule 50 (procedure_statement -> procedure_identifier .)
    WRITE           reduce using rule 50 (procedure_statement -> procedure_identifier .)
    ID              reduce using rule 50 (procedure_statement -> procedure_identifier .)
    BEGIN           reduce using rule 50 (procedure_statement -> procedure_identifier .)
    IF              reduce using rule 50 (procedure_statement -> procedure_identifier .)
    WHILE           reduce using rule 50 (procedure_statement -> procedure_identifier .)
    ELSE            reduce using rule 50 (procedure_statement -> procedure_identifier .)


state 44

    (52) read_statement -> READ . LPAREN input_variable input_variable2 RPAREN SEMICOLON

    LPAREN          shift and go to state 65


state 45

    (56) write_statement -> WRITE . LPAREN output_value output_value2 RPAREN SEMICOLON

    LPAREN          shift and go to state 66


state 46

    (24) call_function -> ID . LPAREN args RPAREN SEMICOLON
    (51) procedure_identifier -> ID .
    (100) variable_identifier -> ID .

    LPAREN          shift and go to state 67
    END             reduce using rule 51 (procedure_identifier -> ID .)
    READ            reduce using rule 51 (procedure_identifier -> ID .)
    WRITE           reduce using rule 51 (procedure_identifier -> ID .)
    ID              reduce using rule 51 (procedure_identifier -> ID .)
    BEGIN           reduce using rule 51 (procedure_identifier -> ID .)
    IF              reduce using rule 51 (procedure_identifier -> ID .)
    WHILE           reduce using rule 51 (procedure_identifier -> ID .)
    ELSE            reduce using rule 51 (procedure_identifier -> ID .)
    COLON           reduce using rule 100 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 100 (variable_identifier -> ID .)


state 47

    (64) if_statement -> IF . LPAREN expression RPAREN THEN statement
    (65) if_statement -> IF . LPAREN expression RPAREN THEN statement ELSE statement

    LPAREN          shift and go to state 68


state 48

    (66) while_statement -> WHILE . expression DO statement
    (67) while_statement -> WHILE . expression DO BEGIN statement END SEMICOLON
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 69
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 49

    (95) variable -> entire_variable .
    (98) array_variable -> entire_variable .

    COLON           reduce using rule 95 (variable -> entire_variable .)
    COMMA           reduce using rule 95 (variable -> entire_variable .)
    RPAREN          reduce using rule 95 (variable -> entire_variable .)
    TIMES           reduce using rule 95 (variable -> entire_variable .)
    DIV             reduce using rule 95 (variable -> entire_variable .)
    AND             reduce using rule 95 (variable -> entire_variable .)
    PLUS            reduce using rule 95 (variable -> entire_variable .)
    MINUS           reduce using rule 95 (variable -> entire_variable .)
    OR              reduce using rule 95 (variable -> entire_variable .)
    EQUAL           reduce using rule 95 (variable -> entire_variable .)
    DISTINT         reduce using rule 95 (variable -> entire_variable .)
    LESS            reduce using rule 95 (variable -> entire_variable .)
    GREATER         reduce using rule 95 (variable -> entire_variable .)
    DO              reduce using rule 95 (variable -> entire_variable .)
    RBRACKET        reduce using rule 95 (variable -> entire_variable .)
    SEMICOLON       reduce using rule 95 (variable -> entire_variable .)
    LBRACKET        reduce using rule 98 (array_variable -> entire_variable .)


state 50

    (96) variable -> indexed_variable .

    COLON           reduce using rule 96 (variable -> indexed_variable .)
    COMMA           reduce using rule 96 (variable -> indexed_variable .)
    RPAREN          reduce using rule 96 (variable -> indexed_variable .)
    TIMES           reduce using rule 96 (variable -> indexed_variable .)
    DIV             reduce using rule 96 (variable -> indexed_variable .)
    AND             reduce using rule 96 (variable -> indexed_variable .)
    PLUS            reduce using rule 96 (variable -> indexed_variable .)
    MINUS           reduce using rule 96 (variable -> indexed_variable .)
    OR              reduce using rule 96 (variable -> indexed_variable .)
    EQUAL           reduce using rule 96 (variable -> indexed_variable .)
    DISTINT         reduce using rule 96 (variable -> indexed_variable .)
    LESS            reduce using rule 96 (variable -> indexed_variable .)
    GREATER         reduce using rule 96 (variable -> indexed_variable .)
    DO              reduce using rule 96 (variable -> indexed_variable .)
    RBRACKET        reduce using rule 96 (variable -> indexed_variable .)
    SEMICOLON       reduce using rule 96 (variable -> indexed_variable .)


state 51

    (99) entire_variable -> variable_identifier .

    COLON           reduce using rule 99 (entire_variable -> variable_identifier .)
    LBRACKET        reduce using rule 99 (entire_variable -> variable_identifier .)
    COMMA           reduce using rule 99 (entire_variable -> variable_identifier .)
    RPAREN          reduce using rule 99 (entire_variable -> variable_identifier .)
    TIMES           reduce using rule 99 (entire_variable -> variable_identifier .)
    DIV             reduce using rule 99 (entire_variable -> variable_identifier .)
    AND             reduce using rule 99 (entire_variable -> variable_identifier .)
    PLUS            reduce using rule 99 (entire_variable -> variable_identifier .)
    MINUS           reduce using rule 99 (entire_variable -> variable_identifier .)
    OR              reduce using rule 99 (entire_variable -> variable_identifier .)
    EQUAL           reduce using rule 99 (entire_variable -> variable_identifier .)
    DISTINT         reduce using rule 99 (entire_variable -> variable_identifier .)
    LESS            reduce using rule 99 (entire_variable -> variable_identifier .)
    GREATER         reduce using rule 99 (entire_variable -> variable_identifier .)
    DO              reduce using rule 99 (entire_variable -> variable_identifier .)
    RBRACKET        reduce using rule 99 (entire_variable -> variable_identifier .)
    SEMICOLON       reduce using rule 99 (entire_variable -> variable_identifier .)


state 52

    (97) indexed_variable -> array_variable . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 75


state 53

    (22) procedure_declaration -> PROCEDURE ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (101) empty -> .

    VAR             shift and go to state 8
    CONST           shift and go to state 9
    PROCEDURE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    BEGIN           reduce using rule 101 (empty -> .)

    block                          shift and go to state 76
    variable_declaration_part      shift and go to state 6
    empty                          shift and go to state 7

state 54

    (23) function_declaration -> FUNCTION ID LPAREN . variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part
    (6) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 17

    variable_declaration           shift and go to state 77

state 55

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)
    FUNCTION        reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)


state 56

    (6) variable_declaration -> ID variable_declaration2 COLON . type
    (11) type -> . simple_type
    (12) type -> . array_type
    (15) simple_type -> . type_identifier
    (13) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR
    (18) type_identifier -> . BOOLEAN

    ARRAY           shift and go to state 82
    INTEGER         shift and go to state 83
    CHAR            shift and go to state 84
    BOOLEAN         shift and go to state 85

    type                           shift and go to state 78
    simple_type                    shift and go to state 79
    array_type                     shift and go to state 80
    type_identifier                shift and go to state 81

state 57

    (7) variable_declaration2 -> COMMA ID . variable_declaration2
    (7) variable_declaration2 -> . COMMA ID variable_declaration2
    (8) variable_declaration2 -> . empty
    (101) empty -> .

    COMMA           shift and go to state 27
    COLON           reduce using rule 101 (empty -> .)

    variable_declaration2          shift and go to state 86
    empty                          shift and go to state 28

state 58

    (5) variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .

    PROCEDURE       reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)


state 59

    (9) const_declaration -> ID EQUAL NUMBER .

    SEMICOLON       reduce using rule 9 (const_declaration -> ID EQUAL NUMBER .)


state 60

    (10) const_declaration -> ID EQUAL STRING .

    SEMICOLON       reduce using rule 10 (const_declaration -> ID EQUAL STRING .)


state 61

    (35) compound_statement -> BEGIN statement END . DOT compound_statement2

    DOT             shift and go to state 87


state 62

    (39) statement -> statement simple_statement .

    END             reduce using rule 39 (statement -> statement simple_statement .)
    READ            reduce using rule 39 (statement -> statement simple_statement .)
    WRITE           reduce using rule 39 (statement -> statement simple_statement .)
    ID              reduce using rule 39 (statement -> statement simple_statement .)
    BEGIN           reduce using rule 39 (statement -> statement simple_statement .)
    IF              reduce using rule 39 (statement -> statement simple_statement .)
    WHILE           reduce using rule 39 (statement -> statement simple_statement .)
    ELSE            reduce using rule 39 (statement -> statement simple_statement .)


state 63

    (40) statement -> statement structured_statement .

    END             reduce using rule 40 (statement -> statement structured_statement .)
    READ            reduce using rule 40 (statement -> statement structured_statement .)
    WRITE           reduce using rule 40 (statement -> statement structured_statement .)
    ID              reduce using rule 40 (statement -> statement structured_statement .)
    BEGIN           reduce using rule 40 (statement -> statement structured_statement .)
    IF              reduce using rule 40 (statement -> statement structured_statement .)
    WHILE           reduce using rule 40 (statement -> statement structured_statement .)
    ELSE            reduce using rule 40 (statement -> statement structured_statement .)


state 64

    (49) assignment_statement -> variable COLON . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 88


state 65

    (52) read_statement -> READ LPAREN . input_variable input_variable2 RPAREN SEMICOLON
    (53) input_variable -> . variable
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    ID              shift and go to state 91

    input_variable                 shift and go to state 89
    variable                       shift and go to state 90
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 66

    (56) write_statement -> WRITE LPAREN . output_value output_value2 RPAREN SEMICOLON
    (57) output_value -> . expression
    (58) output_value -> . STRING
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    STRING          shift and go to state 94
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    output_value                   shift and go to state 92
    expression                     shift and go to state 93
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 67

    (24) call_function -> ID LPAREN . args RPAREN SEMICOLON
    (25) args -> . args args2
    (26) args -> . empty
    (101) empty -> .

    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    NUMBER          reduce using rule 101 (empty -> .)
    STRING          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    args                           shift and go to state 95
    empty                          shift and go to state 96

state 68

    (64) if_statement -> IF LPAREN . expression RPAREN THEN statement
    (65) if_statement -> IF LPAREN . expression RPAREN THEN statement ELSE statement
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 97
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 69

    (66) while_statement -> WHILE expression . DO statement
    (67) while_statement -> WHILE expression . DO BEGIN statement END SEMICOLON

    DO              shift and go to state 98


state 70

    (68) expression -> simple_expression .
    (69) expression -> simple_expression . relational_operator simple_expression
    (80) relational_operator -> . EQUAL
    (81) relational_operator -> . DISTINT
    (82) relational_operator -> . LESS
    (83) relational_operator -> . GREATER
    (84) relational_operator -> . GREATER EQUAL
    (85) relational_operator -> . LESS EQUAL

    DO              reduce using rule 68 (expression -> simple_expression .)
    COMMA           reduce using rule 68 (expression -> simple_expression .)
    RPAREN          reduce using rule 68 (expression -> simple_expression .)
    RBRACKET        reduce using rule 68 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 68 (expression -> simple_expression .)
    EQUAL           shift and go to state 100
    DISTINT         shift and go to state 101
    LESS            shift and go to state 102
    GREATER         shift and go to state 103

    relational_operator            shift and go to state 99

state 71

    (70) simple_expression -> sign . term simple_expression2
    (73) term -> . factor term2
    (76) factor -> . variable
    (77) factor -> . NUMBER
    (78) factor -> . LPAREN expression RPAREN
    (79) factor -> . NOT factor
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    NUMBER          shift and go to state 107
    LPAREN          shift and go to state 108
    NOT             shift and go to state 109
    ID              shift and go to state 91

    term                           shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 106
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 72

    (86) sign -> PLUS .

    NUMBER          reduce using rule 86 (sign -> PLUS .)
    LPAREN          reduce using rule 86 (sign -> PLUS .)
    NOT             reduce using rule 86 (sign -> PLUS .)
    ID              reduce using rule 86 (sign -> PLUS .)


state 73

    (87) sign -> MINUS .

    NUMBER          reduce using rule 87 (sign -> MINUS .)
    LPAREN          reduce using rule 87 (sign -> MINUS .)
    NOT             reduce using rule 87 (sign -> MINUS .)
    ID              reduce using rule 87 (sign -> MINUS .)


state 74

    (88) sign -> empty .

    NUMBER          reduce using rule 88 (sign -> empty .)
    LPAREN          reduce using rule 88 (sign -> empty .)
    NOT             reduce using rule 88 (sign -> empty .)
    ID              reduce using rule 88 (sign -> empty .)


state 75

    (97) indexed_variable -> array_variable LBRACKET . expression RBRACKET
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 110
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 76

    (22) procedure_declaration -> PROCEDURE ID SEMICOLON block .

    BEGIN           reduce using rule 22 (procedure_declaration -> PROCEDURE ID SEMICOLON block .)


state 77

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration . RPAREN COLON type SEMICOLON variable_declaration_part

    RPAREN          shift and go to state 111


state 78

    (6) variable_declaration -> ID variable_declaration2 COLON type .

    SEMICOLON       reduce using rule 6 (variable_declaration -> ID variable_declaration2 COLON type .)
    RPAREN          reduce using rule 6 (variable_declaration -> ID variable_declaration2 COLON type .)


state 79

    (11) type -> simple_type .

    SEMICOLON       reduce using rule 11 (type -> simple_type .)
    RPAREN          reduce using rule 11 (type -> simple_type .)


state 80

    (12) type -> array_type .

    SEMICOLON       reduce using rule 12 (type -> array_type .)
    RPAREN          reduce using rule 12 (type -> array_type .)


state 81

    (15) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 15 (simple_type -> type_identifier .)
    RPAREN          reduce using rule 15 (simple_type -> type_identifier .)


state 82

    (13) array_type -> ARRAY . LBRACKET index_range RBRACKET OF simple_type

    LBRACKET        shift and go to state 112


state 83

    (16) type_identifier -> INTEGER .

    SEMICOLON       reduce using rule 16 (type_identifier -> INTEGER .)
    RPAREN          reduce using rule 16 (type_identifier -> INTEGER .)


state 84

    (17) type_identifier -> CHAR .

    SEMICOLON       reduce using rule 17 (type_identifier -> CHAR .)
    RPAREN          reduce using rule 17 (type_identifier -> CHAR .)


state 85

    (18) type_identifier -> BOOLEAN .

    SEMICOLON       reduce using rule 18 (type_identifier -> BOOLEAN .)
    RPAREN          reduce using rule 18 (type_identifier -> BOOLEAN .)


state 86

    (7) variable_declaration2 -> COMMA ID variable_declaration2 .

    COLON           reduce using rule 7 (variable_declaration2 -> COMMA ID variable_declaration2 .)


state 87

    (35) compound_statement -> BEGIN statement END DOT . compound_statement2
    (36) compound_statement2 -> . empty
    (37) compound_statement2 -> . compound_statement
    (101) empty -> .
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2

  ! shift/reduce conflict for BEGIN resolved as shift
    $end            reduce using rule 101 (empty -> .)
    END             reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    ELSE            reduce using rule 101 (empty -> .)
    BEGIN           shift and go to state 22

  ! BEGIN           [ reduce using rule 101 (empty -> .) ]

    compound_statement2            shift and go to state 113
    empty                          shift and go to state 114
    compound_statement             shift and go to state 115

state 88

    (49) assignment_statement -> variable COLON EQUAL . expression SEMICOLON
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 116
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 89

    (52) read_statement -> READ LPAREN input_variable . input_variable2 RPAREN SEMICOLON
    (54) input_variable2 -> . empty
    (55) input_variable2 -> . COMMA variable
    (101) empty -> .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 101 (empty -> .)

    input_variable2                shift and go to state 117
    empty                          shift and go to state 118

state 90

    (53) input_variable -> variable .

    COMMA           reduce using rule 53 (input_variable -> variable .)
    RPAREN          reduce using rule 53 (input_variable -> variable .)


state 91

    (100) variable_identifier -> ID .

    COMMA           reduce using rule 100 (variable_identifier -> ID .)
    RPAREN          reduce using rule 100 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 100 (variable_identifier -> ID .)
    TIMES           reduce using rule 100 (variable_identifier -> ID .)
    DIV             reduce using rule 100 (variable_identifier -> ID .)
    AND             reduce using rule 100 (variable_identifier -> ID .)
    PLUS            reduce using rule 100 (variable_identifier -> ID .)
    MINUS           reduce using rule 100 (variable_identifier -> ID .)
    OR              reduce using rule 100 (variable_identifier -> ID .)
    EQUAL           reduce using rule 100 (variable_identifier -> ID .)
    DISTINT         reduce using rule 100 (variable_identifier -> ID .)
    LESS            reduce using rule 100 (variable_identifier -> ID .)
    GREATER         reduce using rule 100 (variable_identifier -> ID .)
    DO              reduce using rule 100 (variable_identifier -> ID .)
    RBRACKET        reduce using rule 100 (variable_identifier -> ID .)
    SEMICOLON       reduce using rule 100 (variable_identifier -> ID .)


state 92

    (56) write_statement -> WRITE LPAREN output_value . output_value2 RPAREN SEMICOLON
    (59) output_value2 -> . empty
    (60) output_value2 -> . COMMA expression
    (101) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 101 (empty -> .)

    output_value2                  shift and go to state 120
    empty                          shift and go to state 121

state 93

    (57) output_value -> expression .

    COMMA           reduce using rule 57 (output_value -> expression .)
    RPAREN          reduce using rule 57 (output_value -> expression .)


state 94

    (58) output_value -> STRING .

    COMMA           reduce using rule 58 (output_value -> STRING .)
    RPAREN          reduce using rule 58 (output_value -> STRING .)


state 95

    (24) call_function -> ID LPAREN args . RPAREN SEMICOLON
    (25) args -> args . args2
    (27) args2 -> . empty
    (28) args2 -> . COMMA args
    (29) args2 -> . NUMBER COMMA args
    (30) args2 -> . STRING args
    (31) args2 -> . ID
    (32) args2 -> . NUMBER
    (33) args2 -> . STRING
    (101) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RPAREN          shift and go to state 124
    COMMA           shift and go to state 127
    NUMBER          shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 123

  ! RPAREN          [ reduce using rule 101 (empty -> .) ]
  ! COMMA           [ reduce using rule 101 (empty -> .) ]
  ! NUMBER          [ reduce using rule 101 (empty -> .) ]
  ! STRING          [ reduce using rule 101 (empty -> .) ]
  ! ID              [ reduce using rule 101 (empty -> .) ]

    args2                          shift and go to state 125
    empty                          shift and go to state 126

state 96

    (26) args -> empty .

    RPAREN          reduce using rule 26 (args -> empty .)
    COMMA           reduce using rule 26 (args -> empty .)
    NUMBER          reduce using rule 26 (args -> empty .)
    STRING          reduce using rule 26 (args -> empty .)
    ID              reduce using rule 26 (args -> empty .)


state 97

    (64) if_statement -> IF LPAREN expression . RPAREN THEN statement
    (65) if_statement -> IF LPAREN expression . RPAREN THEN statement ELSE statement

    RPAREN          shift and go to state 130


state 98

    (66) while_statement -> WHILE expression DO . statement
    (67) while_statement -> WHILE expression DO . BEGIN statement END SEMICOLON
    (38) statement -> . simple_statement
    (39) statement -> . statement simple_statement
    (40) statement -> . statement structured_statement
    (41) statement -> . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    BEGIN           shift and go to state 132
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    statement                      shift and go to state 131
    simple_statement               shift and go to state 32
    structured_statement           shift and go to state 33
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 99

    (69) expression -> simple_expression relational_operator . simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    simple_expression              shift and go to state 133
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 100

    (80) relational_operator -> EQUAL .

    PLUS            reduce using rule 80 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 80 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 80 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 80 (relational_operator -> EQUAL .)
    NOT             reduce using rule 80 (relational_operator -> EQUAL .)
    ID              reduce using rule 80 (relational_operator -> EQUAL .)


state 101

    (81) relational_operator -> DISTINT .

    PLUS            reduce using rule 81 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 81 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 81 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 81 (relational_operator -> DISTINT .)
    NOT             reduce using rule 81 (relational_operator -> DISTINT .)
    ID              reduce using rule 81 (relational_operator -> DISTINT .)


state 102

    (82) relational_operator -> LESS .
    (85) relational_operator -> LESS . EQUAL

    PLUS            reduce using rule 82 (relational_operator -> LESS .)
    MINUS           reduce using rule 82 (relational_operator -> LESS .)
    NUMBER          reduce using rule 82 (relational_operator -> LESS .)
    LPAREN          reduce using rule 82 (relational_operator -> LESS .)
    NOT             reduce using rule 82 (relational_operator -> LESS .)
    ID              reduce using rule 82 (relational_operator -> LESS .)
    EQUAL           shift and go to state 134


state 103

    (83) relational_operator -> GREATER .
    (84) relational_operator -> GREATER . EQUAL

    PLUS            reduce using rule 83 (relational_operator -> GREATER .)
    MINUS           reduce using rule 83 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 83 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 83 (relational_operator -> GREATER .)
    NOT             reduce using rule 83 (relational_operator -> GREATER .)
    ID              reduce using rule 83 (relational_operator -> GREATER .)
    EQUAL           shift and go to state 135


state 104

    (70) simple_expression -> sign term . simple_expression2
    (71) simple_expression2 -> . adding_operator term
    (72) simple_expression2 -> . empty
    (89) adding_operator -> . PLUS
    (90) adding_operator -> . MINUS
    (91) adding_operator -> . OR
    (101) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    OR              shift and go to state 141
    EQUAL           reduce using rule 101 (empty -> .)
    DISTINT         reduce using rule 101 (empty -> .)
    LESS            reduce using rule 101 (empty -> .)
    GREATER         reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    RBRACKET        reduce using rule 101 (empty -> .)
    SEMICOLON       reduce using rule 101 (empty -> .)

    simple_expression2             shift and go to state 136
    adding_operator                shift and go to state 137
    empty                          shift and go to state 138

state 105

    (73) term -> factor . term2
    (74) term2 -> . multiplying_operator factor
    (75) term2 -> . empty
    (92) multiplying_operator -> . TIMES
    (93) multiplying_operator -> . DIV
    (94) multiplying_operator -> . AND
    (101) empty -> .

    TIMES           shift and go to state 145
    DIV             shift and go to state 146
    AND             shift and go to state 147
    PLUS            reduce using rule 101 (empty -> .)
    MINUS           reduce using rule 101 (empty -> .)
    OR              reduce using rule 101 (empty -> .)
    EQUAL           reduce using rule 101 (empty -> .)
    DISTINT         reduce using rule 101 (empty -> .)
    LESS            reduce using rule 101 (empty -> .)
    GREATER         reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    RBRACKET        reduce using rule 101 (empty -> .)
    SEMICOLON       reduce using rule 101 (empty -> .)

    term2                          shift and go to state 142
    multiplying_operator           shift and go to state 143
    empty                          shift and go to state 144

state 106

    (76) factor -> variable .

    TIMES           reduce using rule 76 (factor -> variable .)
    DIV             reduce using rule 76 (factor -> variable .)
    AND             reduce using rule 76 (factor -> variable .)
    PLUS            reduce using rule 76 (factor -> variable .)
    MINUS           reduce using rule 76 (factor -> variable .)
    OR              reduce using rule 76 (factor -> variable .)
    EQUAL           reduce using rule 76 (factor -> variable .)
    DISTINT         reduce using rule 76 (factor -> variable .)
    LESS            reduce using rule 76 (factor -> variable .)
    GREATER         reduce using rule 76 (factor -> variable .)
    DO              reduce using rule 76 (factor -> variable .)
    COMMA           reduce using rule 76 (factor -> variable .)
    RPAREN          reduce using rule 76 (factor -> variable .)
    RBRACKET        reduce using rule 76 (factor -> variable .)
    SEMICOLON       reduce using rule 76 (factor -> variable .)


state 107

    (77) factor -> NUMBER .

    TIMES           reduce using rule 77 (factor -> NUMBER .)
    DIV             reduce using rule 77 (factor -> NUMBER .)
    AND             reduce using rule 77 (factor -> NUMBER .)
    PLUS            reduce using rule 77 (factor -> NUMBER .)
    MINUS           reduce using rule 77 (factor -> NUMBER .)
    OR              reduce using rule 77 (factor -> NUMBER .)
    EQUAL           reduce using rule 77 (factor -> NUMBER .)
    DISTINT         reduce using rule 77 (factor -> NUMBER .)
    LESS            reduce using rule 77 (factor -> NUMBER .)
    GREATER         reduce using rule 77 (factor -> NUMBER .)
    DO              reduce using rule 77 (factor -> NUMBER .)
    COMMA           reduce using rule 77 (factor -> NUMBER .)
    RPAREN          reduce using rule 77 (factor -> NUMBER .)
    RBRACKET        reduce using rule 77 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 77 (factor -> NUMBER .)


state 108

    (78) factor -> LPAREN . expression RPAREN
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 148
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 109

    (79) factor -> NOT . factor
    (76) factor -> . variable
    (77) factor -> . NUMBER
    (78) factor -> . LPAREN expression RPAREN
    (79) factor -> . NOT factor
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    NUMBER          shift and go to state 107
    LPAREN          shift and go to state 108
    NOT             shift and go to state 109
    ID              shift and go to state 91

    factor                         shift and go to state 149
    variable                       shift and go to state 106
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 110

    (97) indexed_variable -> array_variable LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 150


state 111

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN . COLON type SEMICOLON variable_declaration_part

    COLON           shift and go to state 151


state 112

    (13) array_type -> ARRAY LBRACKET . index_range RBRACKET OF simple_type
    (14) index_range -> . NUMBER DOT DOT NUMBER

    NUMBER          shift and go to state 153

    index_range                    shift and go to state 152

state 113

    (35) compound_statement -> BEGIN statement END DOT compound_statement2 .

    $end            reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    BEGIN           reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    END             reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    READ            reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    WRITE           reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    ID              reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    IF              reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    WHILE           reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    ELSE            reduce using rule 35 (compound_statement -> BEGIN statement END DOT compound_statement2 .)


state 114

    (36) compound_statement2 -> empty .

    $end            reduce using rule 36 (compound_statement2 -> empty .)
    BEGIN           reduce using rule 36 (compound_statement2 -> empty .)
    END             reduce using rule 36 (compound_statement2 -> empty .)
    READ            reduce using rule 36 (compound_statement2 -> empty .)
    WRITE           reduce using rule 36 (compound_statement2 -> empty .)
    ID              reduce using rule 36 (compound_statement2 -> empty .)
    IF              reduce using rule 36 (compound_statement2 -> empty .)
    WHILE           reduce using rule 36 (compound_statement2 -> empty .)
    ELSE            reduce using rule 36 (compound_statement2 -> empty .)


state 115

    (37) compound_statement2 -> compound_statement .

    $end            reduce using rule 37 (compound_statement2 -> compound_statement .)
    BEGIN           reduce using rule 37 (compound_statement2 -> compound_statement .)
    END             reduce using rule 37 (compound_statement2 -> compound_statement .)
    READ            reduce using rule 37 (compound_statement2 -> compound_statement .)
    WRITE           reduce using rule 37 (compound_statement2 -> compound_statement .)
    ID              reduce using rule 37 (compound_statement2 -> compound_statement .)
    IF              reduce using rule 37 (compound_statement2 -> compound_statement .)
    WHILE           reduce using rule 37 (compound_statement2 -> compound_statement .)
    ELSE            reduce using rule 37 (compound_statement2 -> compound_statement .)


state 116

    (49) assignment_statement -> variable COLON EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 154


state 117

    (52) read_statement -> READ LPAREN input_variable input_variable2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 155


state 118

    (54) input_variable2 -> empty .

    RPAREN          reduce using rule 54 (input_variable2 -> empty .)


state 119

    (55) input_variable2 -> COMMA . variable
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    ID              shift and go to state 91

    variable                       shift and go to state 156
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 120

    (56) write_statement -> WRITE LPAREN output_value output_value2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 157


state 121

    (59) output_value2 -> empty .

    RPAREN          reduce using rule 59 (output_value2 -> empty .)


state 122

    (60) output_value2 -> COMMA . expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression relational_operator simple_expression
    (70) simple_expression -> . sign term simple_expression2
    (86) sign -> . PLUS
    (87) sign -> . MINUS
    (88) sign -> . empty
    (101) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    NUMBER          reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    NOT             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)

    expression                     shift and go to state 158
    simple_expression              shift and go to state 70
    sign                           shift and go to state 71
    empty                          shift and go to state 74

state 123

    (31) args2 -> ID .

    RPAREN          reduce using rule 31 (args2 -> ID .)
    COMMA           reduce using rule 31 (args2 -> ID .)
    NUMBER          reduce using rule 31 (args2 -> ID .)
    STRING          reduce using rule 31 (args2 -> ID .)
    ID              reduce using rule 31 (args2 -> ID .)


state 124

    (24) call_function -> ID LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 159


state 125

    (25) args -> args args2 .

    RPAREN          reduce using rule 25 (args -> args args2 .)
    COMMA           reduce using rule 25 (args -> args args2 .)
    NUMBER          reduce using rule 25 (args -> args args2 .)
    STRING          reduce using rule 25 (args -> args args2 .)
    ID              reduce using rule 25 (args -> args args2 .)


state 126

    (27) args2 -> empty .

    RPAREN          reduce using rule 27 (args2 -> empty .)
    COMMA           reduce using rule 27 (args2 -> empty .)
    NUMBER          reduce using rule 27 (args2 -> empty .)
    STRING          reduce using rule 27 (args2 -> empty .)
    ID              reduce using rule 27 (args2 -> empty .)


state 127

    (28) args2 -> COMMA . args
    (25) args -> . args args2
    (26) args -> . empty
    (101) empty -> .

    COMMA           reduce using rule 101 (empty -> .)
    NUMBER          reduce using rule 101 (empty -> .)
    STRING          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)

    args                           shift and go to state 160
    empty                          shift and go to state 96

state 128

    (29) args2 -> NUMBER . COMMA args
    (32) args2 -> NUMBER .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 161
    RPAREN          reduce using rule 32 (args2 -> NUMBER .)
    NUMBER          reduce using rule 32 (args2 -> NUMBER .)
    STRING          reduce using rule 32 (args2 -> NUMBER .)
    ID              reduce using rule 32 (args2 -> NUMBER .)

  ! COMMA           [ reduce using rule 32 (args2 -> NUMBER .) ]


state 129

    (30) args2 -> STRING . args
    (33) args2 -> STRING .
    (25) args -> . args args2
    (26) args -> . empty
    (101) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 33 (args2 -> STRING .)
  ! reduce/reduce conflict for NUMBER resolved using rule 33 (args2 -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 33 (args2 -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 33 (args2 -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (args2 -> STRING .)
    RPAREN          reduce using rule 33 (args2 -> STRING .)
    COMMA           reduce using rule 33 (args2 -> STRING .)
    NUMBER          reduce using rule 33 (args2 -> STRING .)
    STRING          reduce using rule 33 (args2 -> STRING .)
    ID              reduce using rule 33 (args2 -> STRING .)

  ! COMMA           [ reduce using rule 101 (empty -> .) ]
  ! NUMBER          [ reduce using rule 101 (empty -> .) ]
  ! STRING          [ reduce using rule 101 (empty -> .) ]
  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RPAREN          [ reduce using rule 101 (empty -> .) ]

    args                           shift and go to state 162
    empty                          shift and go to state 96

state 130

    (64) if_statement -> IF LPAREN expression RPAREN . THEN statement
    (65) if_statement -> IF LPAREN expression RPAREN . THEN statement ELSE statement

    THEN            shift and go to state 163


state 131

    (66) while_statement -> WHILE expression DO statement .
    (39) statement -> statement . simple_statement
    (40) statement -> statement . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 66 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 66 (while_statement -> WHILE expression DO statement .)
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

  ! READ            [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]
  ! WRITE           [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]
  ! ID              [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]
  ! BEGIN           [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]
  ! IF              [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]
  ! WHILE           [ reduce using rule 66 (while_statement -> WHILE expression DO statement .) ]

    simple_statement               shift and go to state 62
    structured_statement           shift and go to state 63
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 132

    (67) while_statement -> WHILE expression DO BEGIN . statement END SEMICOLON
    (35) compound_statement -> BEGIN . statement END DOT compound_statement2
    (38) statement -> . simple_statement
    (39) statement -> . statement simple_statement
    (40) statement -> . statement structured_statement
    (41) statement -> . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    statement                      shift and go to state 164
    simple_statement               shift and go to state 32
    structured_statement           shift and go to state 33
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 133

    (69) expression -> simple_expression relational_operator simple_expression .

    DO              reduce using rule 69 (expression -> simple_expression relational_operator simple_expression .)
    COMMA           reduce using rule 69 (expression -> simple_expression relational_operator simple_expression .)
    RPAREN          reduce using rule 69 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 69 (expression -> simple_expression relational_operator simple_expression .)
    SEMICOLON       reduce using rule 69 (expression -> simple_expression relational_operator simple_expression .)


state 134

    (85) relational_operator -> LESS EQUAL .

    PLUS            reduce using rule 85 (relational_operator -> LESS EQUAL .)
    MINUS           reduce using rule 85 (relational_operator -> LESS EQUAL .)
    NUMBER          reduce using rule 85 (relational_operator -> LESS EQUAL .)
    LPAREN          reduce using rule 85 (relational_operator -> LESS EQUAL .)
    NOT             reduce using rule 85 (relational_operator -> LESS EQUAL .)
    ID              reduce using rule 85 (relational_operator -> LESS EQUAL .)


state 135

    (84) relational_operator -> GREATER EQUAL .

    PLUS            reduce using rule 84 (relational_operator -> GREATER EQUAL .)
    MINUS           reduce using rule 84 (relational_operator -> GREATER EQUAL .)
    NUMBER          reduce using rule 84 (relational_operator -> GREATER EQUAL .)
    LPAREN          reduce using rule 84 (relational_operator -> GREATER EQUAL .)
    NOT             reduce using rule 84 (relational_operator -> GREATER EQUAL .)
    ID              reduce using rule 84 (relational_operator -> GREATER EQUAL .)


state 136

    (70) simple_expression -> sign term simple_expression2 .

    EQUAL           reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    DISTINT         reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    LESS            reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    GREATER         reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    DO              reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    COMMA           reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    RPAREN          reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    RBRACKET        reduce using rule 70 (simple_expression -> sign term simple_expression2 .)
    SEMICOLON       reduce using rule 70 (simple_expression -> sign term simple_expression2 .)


state 137

    (71) simple_expression2 -> adding_operator . term
    (73) term -> . factor term2
    (76) factor -> . variable
    (77) factor -> . NUMBER
    (78) factor -> . LPAREN expression RPAREN
    (79) factor -> . NOT factor
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    NUMBER          shift and go to state 107
    LPAREN          shift and go to state 108
    NOT             shift and go to state 109
    ID              shift and go to state 91

    term                           shift and go to state 165
    factor                         shift and go to state 105
    variable                       shift and go to state 106
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 138

    (72) simple_expression2 -> empty .

    EQUAL           reduce using rule 72 (simple_expression2 -> empty .)
    DISTINT         reduce using rule 72 (simple_expression2 -> empty .)
    LESS            reduce using rule 72 (simple_expression2 -> empty .)
    GREATER         reduce using rule 72 (simple_expression2 -> empty .)
    DO              reduce using rule 72 (simple_expression2 -> empty .)
    COMMA           reduce using rule 72 (simple_expression2 -> empty .)
    RPAREN          reduce using rule 72 (simple_expression2 -> empty .)
    RBRACKET        reduce using rule 72 (simple_expression2 -> empty .)
    SEMICOLON       reduce using rule 72 (simple_expression2 -> empty .)


state 139

    (89) adding_operator -> PLUS .

    NUMBER          reduce using rule 89 (adding_operator -> PLUS .)
    LPAREN          reduce using rule 89 (adding_operator -> PLUS .)
    NOT             reduce using rule 89 (adding_operator -> PLUS .)
    ID              reduce using rule 89 (adding_operator -> PLUS .)


state 140

    (90) adding_operator -> MINUS .

    NUMBER          reduce using rule 90 (adding_operator -> MINUS .)
    LPAREN          reduce using rule 90 (adding_operator -> MINUS .)
    NOT             reduce using rule 90 (adding_operator -> MINUS .)
    ID              reduce using rule 90 (adding_operator -> MINUS .)


state 141

    (91) adding_operator -> OR .

    NUMBER          reduce using rule 91 (adding_operator -> OR .)
    LPAREN          reduce using rule 91 (adding_operator -> OR .)
    NOT             reduce using rule 91 (adding_operator -> OR .)
    ID              reduce using rule 91 (adding_operator -> OR .)


state 142

    (73) term -> factor term2 .

    PLUS            reduce using rule 73 (term -> factor term2 .)
    MINUS           reduce using rule 73 (term -> factor term2 .)
    OR              reduce using rule 73 (term -> factor term2 .)
    EQUAL           reduce using rule 73 (term -> factor term2 .)
    DISTINT         reduce using rule 73 (term -> factor term2 .)
    LESS            reduce using rule 73 (term -> factor term2 .)
    GREATER         reduce using rule 73 (term -> factor term2 .)
    DO              reduce using rule 73 (term -> factor term2 .)
    COMMA           reduce using rule 73 (term -> factor term2 .)
    RPAREN          reduce using rule 73 (term -> factor term2 .)
    RBRACKET        reduce using rule 73 (term -> factor term2 .)
    SEMICOLON       reduce using rule 73 (term -> factor term2 .)


state 143

    (74) term2 -> multiplying_operator . factor
    (76) factor -> . variable
    (77) factor -> . NUMBER
    (78) factor -> . LPAREN expression RPAREN
    (79) factor -> . NOT factor
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    NUMBER          shift and go to state 107
    LPAREN          shift and go to state 108
    NOT             shift and go to state 109
    ID              shift and go to state 91

    factor                         shift and go to state 166
    variable                       shift and go to state 106
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 144

    (75) term2 -> empty .

    PLUS            reduce using rule 75 (term2 -> empty .)
    MINUS           reduce using rule 75 (term2 -> empty .)
    OR              reduce using rule 75 (term2 -> empty .)
    EQUAL           reduce using rule 75 (term2 -> empty .)
    DISTINT         reduce using rule 75 (term2 -> empty .)
    LESS            reduce using rule 75 (term2 -> empty .)
    GREATER         reduce using rule 75 (term2 -> empty .)
    DO              reduce using rule 75 (term2 -> empty .)
    COMMA           reduce using rule 75 (term2 -> empty .)
    RPAREN          reduce using rule 75 (term2 -> empty .)
    RBRACKET        reduce using rule 75 (term2 -> empty .)
    SEMICOLON       reduce using rule 75 (term2 -> empty .)


state 145

    (92) multiplying_operator -> TIMES .

    NUMBER          reduce using rule 92 (multiplying_operator -> TIMES .)
    LPAREN          reduce using rule 92 (multiplying_operator -> TIMES .)
    NOT             reduce using rule 92 (multiplying_operator -> TIMES .)
    ID              reduce using rule 92 (multiplying_operator -> TIMES .)


state 146

    (93) multiplying_operator -> DIV .

    NUMBER          reduce using rule 93 (multiplying_operator -> DIV .)
    LPAREN          reduce using rule 93 (multiplying_operator -> DIV .)
    NOT             reduce using rule 93 (multiplying_operator -> DIV .)
    ID              reduce using rule 93 (multiplying_operator -> DIV .)


state 147

    (94) multiplying_operator -> AND .

    NUMBER          reduce using rule 94 (multiplying_operator -> AND .)
    LPAREN          reduce using rule 94 (multiplying_operator -> AND .)
    NOT             reduce using rule 94 (multiplying_operator -> AND .)
    ID              reduce using rule 94 (multiplying_operator -> AND .)


state 148

    (78) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 167


state 149

    (79) factor -> NOT factor .

    TIMES           reduce using rule 79 (factor -> NOT factor .)
    DIV             reduce using rule 79 (factor -> NOT factor .)
    AND             reduce using rule 79 (factor -> NOT factor .)
    PLUS            reduce using rule 79 (factor -> NOT factor .)
    MINUS           reduce using rule 79 (factor -> NOT factor .)
    OR              reduce using rule 79 (factor -> NOT factor .)
    EQUAL           reduce using rule 79 (factor -> NOT factor .)
    DISTINT         reduce using rule 79 (factor -> NOT factor .)
    LESS            reduce using rule 79 (factor -> NOT factor .)
    GREATER         reduce using rule 79 (factor -> NOT factor .)
    DO              reduce using rule 79 (factor -> NOT factor .)
    COMMA           reduce using rule 79 (factor -> NOT factor .)
    RPAREN          reduce using rule 79 (factor -> NOT factor .)
    RBRACKET        reduce using rule 79 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 79 (factor -> NOT factor .)


state 150

    (97) indexed_variable -> array_variable LBRACKET expression RBRACKET .

    COLON           reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 97 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)


state 151

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON . type SEMICOLON variable_declaration_part
    (11) type -> . simple_type
    (12) type -> . array_type
    (15) simple_type -> . type_identifier
    (13) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR
    (18) type_identifier -> . BOOLEAN

    ARRAY           shift and go to state 82
    INTEGER         shift and go to state 83
    CHAR            shift and go to state 84
    BOOLEAN         shift and go to state 85

    type                           shift and go to state 168
    simple_type                    shift and go to state 79
    array_type                     shift and go to state 80
    type_identifier                shift and go to state 81

state 152

    (13) array_type -> ARRAY LBRACKET index_range . RBRACKET OF simple_type

    RBRACKET        shift and go to state 169


state 153

    (14) index_range -> NUMBER . DOT DOT NUMBER

    DOT             shift and go to state 170


state 154

    (49) assignment_statement -> variable COLON EQUAL expression SEMICOLON .

    END             reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    READ            reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    WRITE           reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    ID              reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    IF              reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 49 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)


state 155

    (52) read_statement -> READ LPAREN input_variable input_variable2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 171


state 156

    (55) input_variable2 -> COMMA variable .

    RPAREN          reduce using rule 55 (input_variable2 -> COMMA variable .)


state 157

    (56) write_statement -> WRITE LPAREN output_value output_value2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 158

    (60) output_value2 -> COMMA expression .

    RPAREN          reduce using rule 60 (output_value2 -> COMMA expression .)


state 159

    (24) call_function -> ID LPAREN args RPAREN SEMICOLON .

    END             reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    READ            reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    WRITE           reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    ID              reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    BEGIN           reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)
    ELSE            reduce using rule 24 (call_function -> ID LPAREN args RPAREN SEMICOLON .)


state 160

    (28) args2 -> COMMA args .
    (25) args -> args . args2
    (27) args2 -> . empty
    (28) args2 -> . COMMA args
    (29) args2 -> . NUMBER COMMA args
    (30) args2 -> . STRING args
    (31) args2 -> . ID
    (32) args2 -> . NUMBER
    (33) args2 -> . STRING
    (101) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (args2 -> COMMA args .)
    RPAREN          reduce using rule 28 (args2 -> COMMA args .)
    COMMA           shift and go to state 127
    NUMBER          shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 123

  ! COMMA           [ reduce using rule 28 (args2 -> COMMA args .) ]
  ! NUMBER          [ reduce using rule 28 (args2 -> COMMA args .) ]
  ! STRING          [ reduce using rule 28 (args2 -> COMMA args .) ]
  ! ID              [ reduce using rule 28 (args2 -> COMMA args .) ]
  ! COMMA           [ reduce using rule 101 (empty -> .) ]
  ! NUMBER          [ reduce using rule 101 (empty -> .) ]
  ! STRING          [ reduce using rule 101 (empty -> .) ]
  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RPAREN          [ reduce using rule 101 (empty -> .) ]

    args2                          shift and go to state 125
    empty                          shift and go to state 126

state 161

    (29) args2 -> NUMBER COMMA . args
    (25) args -> . args args2
    (26) args -> . empty
    (101) empty -> .

    COMMA           reduce using rule 101 (empty -> .)
    NUMBER          reduce using rule 101 (empty -> .)
    STRING          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)

    args                           shift and go to state 173
    empty                          shift and go to state 96

state 162

    (30) args2 -> STRING args .
    (25) args -> args . args2
    (27) args2 -> . empty
    (28) args2 -> . COMMA args
    (29) args2 -> . NUMBER COMMA args
    (30) args2 -> . STRING args
    (31) args2 -> . ID
    (32) args2 -> . NUMBER
    (33) args2 -> . STRING
    (101) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (args2 -> STRING args .)
    RPAREN          reduce using rule 30 (args2 -> STRING args .)
    COMMA           shift and go to state 127
    NUMBER          shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 123

  ! COMMA           [ reduce using rule 30 (args2 -> STRING args .) ]
  ! NUMBER          [ reduce using rule 30 (args2 -> STRING args .) ]
  ! STRING          [ reduce using rule 30 (args2 -> STRING args .) ]
  ! ID              [ reduce using rule 30 (args2 -> STRING args .) ]
  ! COMMA           [ reduce using rule 101 (empty -> .) ]
  ! NUMBER          [ reduce using rule 101 (empty -> .) ]
  ! STRING          [ reduce using rule 101 (empty -> .) ]
  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RPAREN          [ reduce using rule 101 (empty -> .) ]

    args2                          shift and go to state 125
    empty                          shift and go to state 126

state 163

    (64) if_statement -> IF LPAREN expression RPAREN THEN . statement
    (65) if_statement -> IF LPAREN expression RPAREN THEN . statement ELSE statement
    (38) statement -> . simple_statement
    (39) statement -> . statement simple_statement
    (40) statement -> . statement structured_statement
    (41) statement -> . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    statement                      shift and go to state 174
    simple_statement               shift and go to state 32
    structured_statement           shift and go to state 33
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 164

    (67) while_statement -> WHILE expression DO BEGIN statement . END SEMICOLON
    (35) compound_statement -> BEGIN statement . END DOT compound_statement2
    (39) statement -> statement . simple_statement
    (40) statement -> statement . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    END             shift and go to state 175
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    simple_statement               shift and go to state 62
    structured_statement           shift and go to state 63
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 165

    (71) simple_expression2 -> adding_operator term .

    EQUAL           reduce using rule 71 (simple_expression2 -> adding_operator term .)
    DISTINT         reduce using rule 71 (simple_expression2 -> adding_operator term .)
    LESS            reduce using rule 71 (simple_expression2 -> adding_operator term .)
    GREATER         reduce using rule 71 (simple_expression2 -> adding_operator term .)
    DO              reduce using rule 71 (simple_expression2 -> adding_operator term .)
    COMMA           reduce using rule 71 (simple_expression2 -> adding_operator term .)
    RPAREN          reduce using rule 71 (simple_expression2 -> adding_operator term .)
    RBRACKET        reduce using rule 71 (simple_expression2 -> adding_operator term .)
    SEMICOLON       reduce using rule 71 (simple_expression2 -> adding_operator term .)


state 166

    (74) term2 -> multiplying_operator factor .

    PLUS            reduce using rule 74 (term2 -> multiplying_operator factor .)
    MINUS           reduce using rule 74 (term2 -> multiplying_operator factor .)
    OR              reduce using rule 74 (term2 -> multiplying_operator factor .)
    EQUAL           reduce using rule 74 (term2 -> multiplying_operator factor .)
    DISTINT         reduce using rule 74 (term2 -> multiplying_operator factor .)
    LESS            reduce using rule 74 (term2 -> multiplying_operator factor .)
    GREATER         reduce using rule 74 (term2 -> multiplying_operator factor .)
    DO              reduce using rule 74 (term2 -> multiplying_operator factor .)
    COMMA           reduce using rule 74 (term2 -> multiplying_operator factor .)
    RPAREN          reduce using rule 74 (term2 -> multiplying_operator factor .)
    RBRACKET        reduce using rule 74 (term2 -> multiplying_operator factor .)
    SEMICOLON       reduce using rule 74 (term2 -> multiplying_operator factor .)


state 167

    (78) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 78 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 78 (factor -> LPAREN expression RPAREN .)


state 168

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 176


state 169

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET . OF simple_type

    OF              shift and go to state 177


state 170

    (14) index_range -> NUMBER DOT . DOT NUMBER

    DOT             shift and go to state 178


state 171

    (52) read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .

    END             reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    READ            reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ID              reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    IF              reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 52 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)


state 172

    (56) write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .

    END             reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    READ            reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ID              reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    IF              reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 56 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)


state 173

    (29) args2 -> NUMBER COMMA args .
    (25) args -> args . args2
    (27) args2 -> . empty
    (28) args2 -> . COMMA args
    (29) args2 -> . NUMBER COMMA args
    (30) args2 -> . STRING args
    (31) args2 -> . ID
    (32) args2 -> . NUMBER
    (33) args2 -> . STRING
    (101) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (args2 -> NUMBER COMMA args .)
    RPAREN          reduce using rule 29 (args2 -> NUMBER COMMA args .)
    COMMA           shift and go to state 127
    NUMBER          shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 123

  ! COMMA           [ reduce using rule 29 (args2 -> NUMBER COMMA args .) ]
  ! NUMBER          [ reduce using rule 29 (args2 -> NUMBER COMMA args .) ]
  ! STRING          [ reduce using rule 29 (args2 -> NUMBER COMMA args .) ]
  ! ID              [ reduce using rule 29 (args2 -> NUMBER COMMA args .) ]
  ! COMMA           [ reduce using rule 101 (empty -> .) ]
  ! NUMBER          [ reduce using rule 101 (empty -> .) ]
  ! STRING          [ reduce using rule 101 (empty -> .) ]
  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RPAREN          [ reduce using rule 101 (empty -> .) ]

    args2                          shift and go to state 125
    empty                          shift and go to state 126

state 174

    (64) if_statement -> IF LPAREN expression RPAREN THEN statement .
    (65) if_statement -> IF LPAREN expression RPAREN THEN statement . ELSE statement
    (39) statement -> statement . simple_statement
    (40) statement -> statement . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    ELSE            shift and go to state 179
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

  ! READ            [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WRITE           [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ID              [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! BEGIN           [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! IF              [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WHILE           [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ELSE            [ reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]

    simple_statement               shift and go to state 62
    structured_statement           shift and go to state 63
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 175

    (67) while_statement -> WHILE expression DO BEGIN statement END . SEMICOLON
    (35) compound_statement -> BEGIN statement END . DOT compound_statement2

    SEMICOLON       shift and go to state 180
    DOT             shift and go to state 87


state 176

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (101) empty -> .

    VAR             shift and go to state 8
    CONST           shift and go to state 9
    BEGIN           reduce using rule 101 (empty -> .)

    variable_declaration_part      shift and go to state 181
    empty                          shift and go to state 7

state 177

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET OF . simple_type
    (15) simple_type -> . type_identifier
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR
    (18) type_identifier -> . BOOLEAN

    INTEGER         shift and go to state 83
    CHAR            shift and go to state 84
    BOOLEAN         shift and go to state 85

    simple_type                    shift and go to state 182
    type_identifier                shift and go to state 81

state 178

    (14) index_range -> NUMBER DOT DOT . NUMBER

    NUMBER          shift and go to state 183


state 179

    (65) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE . statement
    (38) statement -> . simple_statement
    (39) statement -> . statement simple_statement
    (40) statement -> . statement structured_statement
    (41) statement -> . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

    statement                      shift and go to state 184
    simple_statement               shift and go to state 32
    structured_statement           shift and go to state 33
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52

state 180

    (67) while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .

    END             reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    READ            reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    WRITE           reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    ID              reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    BEGIN           reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    IF              reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    WHILE           reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)
    ELSE            reduce using rule 67 (while_statement -> WHILE expression DO BEGIN statement END SEMICOLON .)


state 181

    (23) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part .

    BEGIN           reduce using rule 23 (function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part .)


state 182

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .

    SEMICOLON       reduce using rule 13 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)
    RPAREN          reduce using rule 13 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)


state 183

    (14) index_range -> NUMBER DOT DOT NUMBER .

    RBRACKET        reduce using rule 14 (index_range -> NUMBER DOT DOT NUMBER .)


state 184

    (65) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .
    (39) statement -> statement . simple_statement
    (40) statement -> statement . structured_statement
    (44) simple_statement -> . assignment_statement
    (45) simple_statement -> . procedure_statement
    (46) simple_statement -> . read_statement
    (47) simple_statement -> . write_statement
    (48) simple_statement -> . call_function
    (61) structured_statement -> . compound_statement
    (62) structured_statement -> . if_statement
    (63) structured_statement -> . while_statement
    (49) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (50) procedure_statement -> . procedure_identifier
    (52) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (56) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) call_function -> . ID LPAREN args RPAREN SEMICOLON
    (35) compound_statement -> . BEGIN statement END DOT compound_statement2
    (64) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (65) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (66) while_statement -> . WHILE expression DO statement
    (67) while_statement -> . WHILE expression DO BEGIN statement END SEMICOLON
    (95) variable -> . entire_variable
    (96) variable -> . indexed_variable
    (51) procedure_identifier -> . ID
    (99) entire_variable -> . variable_identifier
    (97) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (100) variable_identifier -> . ID
    (98) array_variable -> . entire_variable

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    ELSE            reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    READ            shift and go to state 44
    WRITE           shift and go to state 45
    ID              shift and go to state 46
    BEGIN           shift and go to state 22
    IF              shift and go to state 47
    WHILE           shift and go to state 48

  ! READ            [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WRITE           [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! ID              [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! BEGIN           [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! IF              [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 65 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]

    simple_statement               shift and go to state 62
    structured_statement           shift and go to state 63
    assignment_statement           shift and go to state 34
    procedure_statement            shift and go to state 35
    read_statement                 shift and go to state 36
    write_statement                shift and go to state 37
    call_function                  shift and go to state 38
    compound_statement             shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 41
    variable                       shift and go to state 42
    procedure_identifier           shift and go to state 43
    entire_variable                shift and go to state 49
    indexed_variable               shift and go to state 50
    variable_identifier            shift and go to state 51
    array_variable                 shift and go to state 52
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEGIN in state 87 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 95 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for READ in state 131 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 131 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 160 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 160 resolved as shift
WARNING: shift/reduce conflict for STRING in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 160 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 160 resolved as shift
WARNING: shift/reduce conflict for STRING in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 162 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 162 resolved as shift
WARNING: shift/reduce conflict for STRING in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 162 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 162 resolved as shift
WARNING: shift/reduce conflict for STRING in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 173 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 173 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 174 resolved as shift
WARNING: shift/reduce conflict for READ in state 174 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for READ in state 184 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 184 resolved as shift
WARNING: shift/reduce conflict for ID in state 184 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 184 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 129 resolved using rule (args2 -> STRING)
WARNING: rejected rule (empty -> <empty>) in state 129
WARNING: reduce/reduce conflict in state 160 resolved using rule (args2 -> COMMA args)
WARNING: rejected rule (empty -> <empty>) in state 160
WARNING: reduce/reduce conflict in state 162 resolved using rule (args2 -> STRING args)
WARNING: rejected rule (empty -> <empty>) in state 162
WARNING: reduce/reduce conflict in state 173 resolved using rule (args2 -> NUMBER COMMA args)
WARNING: rejected rule (empty -> <empty>) in state 173
